package classify.query;

import java.io.IOException;
import java.util.Map;
import java.util.TreeMap;

import org.apache.lucene.index.Term;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.search.BooleanClause;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.Searcher;
//import org.apache.lucene.search.TopDocsCollector;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.search.spans.SpanFirstQuery;
import org.apache.lucene.search.spans.SpanTermQuery;

import classify.lucene.IndexWrapper;
import classify.wordTools.ImportantWords;
import classify.wordTools.TermList;

import ec.EvolutionState;
import ec.Individual;
import ec.Problem;
import ec.simple.SimpleFitness;
import ec.simple.SimpleProblemForm;
import ec.util.Parameter;
import ec.vector.IntegerVectorIndividual;

/**
 * To generate queries to perform binary text classification using GA string of
 * integer pairs which are translated into spanFirst queries
 * 
 * @author Laurie
 */

public class ClassifyGA extends Problem implements SimpleProblemForm {

	private Searcher searcher = IndexWrapper.getInstance()
			.getInstantiatedIndexSearcher();

	private float F1train = 0;

	// words in order of F1
	private TermList positiveTermList;

	private BooleanQuery query;

	public void setup(final EvolutionState state, final Parameter base) {

		super.setup(state, base);

		try {
			IndexWrapper.getInstance().setFilters();

			ImportantWords importantWords = new ImportantWords();

			System.out.println("Total docs for cat  "
					+ IndexWrapper.getInstance().getCatnumberAsString() + " "
					+ IndexWrapper.getInstance().totalTrainDocsInCat
					+ " Total test docs for cat "
					+ IndexWrapper.getInstance().totalTestDocsInCat);

			positiveTermList = importantWords.getF1TermList(true);

			System.out.println("Positive word list: "
					+ positiveTermList.toString());

			System.out.println();

		} catch (IOException e) {
			e.printStackTrace();
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}

	public void evaluate(final EvolutionState state, final Individual ind,
			final int subpopulation, final int threadnum) {

		if (ind.evaluated)
			return;

		ClassifyGAFitness fitness = (ClassifyGAFitness) ind.fitness;

		IntegerVectorIndividual intVectorIndividual = (IntegerVectorIndividual) ind;

		// use sorted map to remove redundant elements and improve readability
		Map<String, Integer> spanFirstMap = new TreeMap<String, Integer>();
		
		// create query from Map
		query = new BooleanQuery(true);

		// read through vector 2 ints at at time. 1st int retrieves word, second
		// specifies end for Lucene spanFirstQuery
		// store results in Map after removing redundant queries (i.e. same word
		// but  lower end value)
		for (int x = 0; x < intVectorIndividual.genome.length; x = x + 2) {

			// any ints below 0 are ignored
			if (intVectorIndividual.genome[x] >= 0
					&& x + 1 < intVectorIndividual.genome.length

					// ignore clauses where end value of spanFirst is very low
					&& intVectorIndividual.genome[x + 1] > 4) {

				final String word = positiveTermList.getTerm(
						intVectorIndividual.genome[x]).text();

//				if (spanFirstMap.containsKey(word)) {
//
//					final int end = spanFirstMap.get(word);
//					spanFirstMap.put(word, Math.max(end,
//							intVectorIndividual.genome[x + 1]));
//				} else
//					spanFirstMap.put(word, intVectorIndividual.genome[x + 1]);
//
//			}
//		}



//		for (String word : spanFirstMap.keySet()) {

			SpanFirstQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(
					IndexWrapper.FIELD_CONTENTS, word)), intVectorIndividual.genome[x + 1]);
			query.add(sfq, BooleanClause.Occur.SHOULD);
		//}

		// query.setMinimumNumberShouldMatch(termNo);

		fitness.setNumberOfTerms(spanFirstMap.size());

		try {
			 TopScoreDocCollector collector = TopScoreDocCollector.create(
				        0, false);
			searcher.search(query, IndexWrapper.getInstance().catTrainF, collector);
			final int positiveMatch = collector.getTotalHits();

			collector =  TopScoreDocCollector.create(
			        0, false);
			searcher.search(query, IndexWrapper.getInstance().othersTrainF,
					collector);
			final int negativeMatch = collector.getTotalHits();

			F1train = ClassifyQuery.f1(positiveMatch, negativeMatch, IndexWrapper
					.getInstance().totalTrainDocsInCat);

			fitness.setTrainValues(positiveMatch, negativeMatch);
			fitness.setF1Train(F1train);
			fitness.setQuery(query);

		} catch (IOException e) {

			e.printStackTrace();
		}

		float rawfitness = F1train;

		((SimpleFitness) intVectorIndividual.fitness).setFitness(state,
				rawfitness, false);

		ind.evaluated = true;
	}}}

	@Override
	public void describe(Individual ind, EvolutionState state,
			int subpopulation, int threadnum, int log, int verbosity) {

		System.out.println("in describe query is: " + query + " F1 is "
				+ F1train);
	}
}
